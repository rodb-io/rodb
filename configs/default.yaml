# TODO test the createPathRegexp method (http output)
# TODO the outputs should not store the raw lists, but build private structures from it
# TODO remove the source layer?
# TODO performance analysis
parsers:
  - integer:
      name: defaultInteger
      ignoreCharacters: ", .â‚¬$"
  - float:
      name: defaultFloat
      decimalSeparator: "."
      ignoreCharacters: ", "
  - boolean:
      name: defaultBoolean
      trueValues: ["true", "1", "yes", "TRUE", "YES"]
      falseValues: ["false", "0", "no", "FALSE", "NO", ""]
  - string:
      name: defaultString
      convertFromCharset: ""
sources:
  - filesystem:
      name: defaultSource
      dieOnInputChange: true
      # TODO data from stdin? Test reading /dev/stdin
      path: ./
  # TODO S3 source
  # TODO http source
inputs:
  - csv:
      name: defaultInput
      source: defaultSource
      path: ./dummy.csv
      ignoreFirstRow: true
      delimiter: ","
      columns:
        - name: id
          parser: defaultInteger
        - name: name
          parser: defaultString
        - name: number
          parser: defaultFloat
        - name: bool
          parser: defaultBoolean
  - csv:
      name: defaultInput2
      source: defaultSource
      path: ./dummy2.csv
      ignoreFirstRow: true
      autodetectColumns: true
      delimiter: ","
  # TODO xml input
  # TODO json input
  # TODO json rows input
  # TODO database source/input?
indexes:
  - memoryMap:
      name: defaultIndex
      input: defaultInput
      columns:
        - id
        - name
  # TODO stored indexes (bson or msgpack?)
  # TODO bleve index
  # TODO lucene index
outputs:
  # TODO autogenerated API doc output?
  - graphql:
      name: defaultGraphqlOutput
      # TODO configuration
  - jsonArray:
      name: defaultJsonArrayOutput
      input: defaultInput
      limit:
        default: 100
        max: 1000
        parameter: "limit"
      offset:
        parameter: "offset"
      parameters:
        # TODO search partial texts
        id:
          column: id
          index: defaultIndex
          parser: integer
        name:
          column: name
          index: defaultIndex
          parser: string
      relationships:
        mySubProperty:
          input: defaultInput
          isArray: false
          match:
            - parentColumn: id
              childColumn: id
              childIndex: defaultIndex
      # TODO sorting
  - jsonObject:
      name: defaultJsonObjectOutput
      input: defaultInput
      relationships:
        mySubProperty:
          input: defaultInput
          isArray: false
          match:
            - parentColumn: id
              childColumn: id
              childIndex: defaultIndex
          relationships:
            mySubSubProperty:
              input: defaultInput
              isArray: true
              match:
                - parentColumn: id
                  childColumn: id
                  childIndex: defaultIndex
              sort:
                - column: id
                  ascending: true
      parameters:
        id:
          column: id
          index: defaultIndex
          parser: integer
services:
  - http:
      name: defaultService
      # TODO add health-checks
      listen: ":80"
      errorsType: application/json
      routes:
        - path: "/dummies"
          output: defaultJsonArrayOutput
        - path: "/dummies/{id}"
          output: defaultJsonObjectOutput
  # TODO https service
  # TODO authentication
  # TODO websocket service
  # TODO console (stin pipeable?) service
