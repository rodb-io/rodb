# TODO split the jsonArray handler in functions
# TODO test all the jsonArray output
# TODO improve error messages send to the services by the outputs
# TODO data from stdin? Test reading /dev/stdin
# TODO e2e tests? (test data + relationships returned by the service from the config)
# TODO performance analysis
parsers:
  defaultInteger:
    integer:
      ignoreCharacters: ", .â‚¬$"
  defaultFloat:
    float:
      decimalSeparator: "."
      ignoreCharacters: ", "
  defaultBoolean:
    boolean:
      trueValues: ["true", "1", "yes", "TRUE", "YES"]
      falseValues: ["false", "0", "no", "FALSE", "NO", ""]
  defaultString:
    string:
      convertFromCharset: ""
sources:
  defaultSource:
    filesystem:
      path: ./
  # TODO S3 source
  # TODO http source
inputs:
  defaultInput:
    csv:
      source: defaultSource
      path: ./dummy.csv
      ignoreFirstRow: true
      delimiter: ","
      columns:
        - name: id
          parser: defaultInteger
        - name: name
          parser: defaultString
        - name: number
          parser: defaultFloat
        - name: bool
          parser: defaultBoolean
  defaultInput2:
    csv:
      source: defaultSource
      path: ./dummy2.csv
      ignoreFirstRow: true
      autodetectColumns: true
      delimiter: ","
  # TODO xml input
  # TODO json input
  # TODO json rows input
  # TODO database source/input?
indexes:
  defaultIndex:
    memoryMap:
      dieOnInputChange: true
      input: defaultInput
      columns:
        - id
        - name
  # TODO stored indexes (bson or msgpack?)
  # TODO bleve index
  # TODO lucene index
services:
  defaultService:
    http:
      # TODO add health-checks
      listen: ":80"
      errorsType: application/json
  # TODO https service
  # TODO authentication
  # TODO websocket service
  # TODO console (stin pipeable?) service
outputs:
  # TODO autogenerated API doc output?
  defaultGraphqlOutput:
    graphql:
      services:
        - defaultService
      endpoint: "/"
      # TODO configuration
  defaultJsonArrayOutput:
    jsonArray:
      input: defaultInput
      services:
        - defaultService
      endpoint: "/dummies"
      # TODO send the paging values via headers/metadata
      limit:
        default: 100
        max: 1000
        parameter: "limit"
      offset:
        # TODO implement the offset
        parameter: "offset"
      search:
        # TODO search partial texts
        id:
          column: id
          index: defaultIndex
          parser: integer
        name:
          column: name
          index: defaultIndex
          parser: string
      relationships:
        mySubProperty:
          input: defaultInput
          isArray: false
          match:
            - parentColumn: id
              childColumn: id
              childIndex: defaultIndex
      # TODO sorting
  defaultJsonObjectOutput:
    jsonObject:
      input: defaultInput
      services:
        - defaultService
      endpoint: "/dummies/?"
      relationships:
        mySubProperty:
          input: defaultInput
          isArray: false
          match:
            - parentColumn: id
              childColumn: id
              childIndex: defaultIndex
          relationships:
            mySubSubProperty:
              input: defaultInput
              isArray: true
              match:
                - parentColumn: id
                  childColumn: id
                  childIndex: defaultIndex
              sort:
                - column: id
                  ascending: true
      parameters:
        - column: id
          parser: integer
          index: defaultIndex
